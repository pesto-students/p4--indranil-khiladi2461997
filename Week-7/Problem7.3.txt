class ListNode {
  constructor(val = 0, next = null) {
    this.val = val;
    this.next = next;
  }
}

function hasLoop(head) {
  if (!head || !head.next) {
    return false;
  }

  let slow = head;
  let fast = head;

  while (fast && fast.next) {
    slow = slow.next;
    fast = fast.next.next;

    if (slow === fast) {
      return true;
    }
  }

  return false;
}


function createLinkedList(values) {
  if (!values.length) {
    return null, [];
  }

  const head = new ListNode(values[0]);
  let current = head;
  const nodes = [head];
  for (let i = 1; i < values.length; i++) {
    const newNode = new ListNode(values[i]);
    current.next = newNode;
    current = newNode;
    nodes.push(newNode);
  }

  return head, nodes;
}


const values1 = [1, 3, 4];
const x1 = 2;
const head1, nodes1 = createLinkedList(values1);

if (x1 !== 0) {
  nodes1[nodes1.length - 1].next = nodes1[x1 - 1];
}

console.log("Loop detected:", hasLoop(head1) ? "Yes" : "No");


const values2 = [1, 8, 3, 4];
const x2 = 0;
const head2, nodes2 = createLinkedList(values2);

if (x2 !== 0) {
  nodes2[nodes2.length - 1].next = nodes2[x2 - 1];
}

console.log("Loop detected:", hasLoop(head2) ? "Yes" : "No");

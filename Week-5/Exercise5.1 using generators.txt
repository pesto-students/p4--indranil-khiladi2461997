
function doTask1() {
    return new Promise((resolve, reject) => {
        setTimeout(() => resolve("Task 1 completed"), 1000);
    });
}

function doTask2() {
    return new Promise((resolve, reject) => {
        setTimeout(() => resolve("Task 2 completed"), 2000);
    });
}

function doTask3() {
    return new Promise((resolve, reject) => {
        setTimeout(() => resolve("Task 3 completed"), 3000);
    });
}

function* executeTasksGenerator() {
    yield doTask1().then(console.log);
    yield doTask2().then(console.log);
    yield doTask3().then(console.log);
}

function runGenerator(gen) {
    const iterator = gen();

    function handleNext(result) {
        if (result.done) return;

        result.value.then(res => {
            handleNext(iterator.next(res));
        }).catch(err => {
            iterator.throw(err);
        });
    }

    try {
        handleNext(iterator.next());
    } catch (error) {
        console.error(error);
    }
}

runGenerator(executeTasksGenerator);
